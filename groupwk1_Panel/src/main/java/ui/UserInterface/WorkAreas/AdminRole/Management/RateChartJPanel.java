/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.UserInterface.WorkAreas.AdminRole.Management;

import Business.Directory.ProfessorDirectory;
import Business.Person.Professor;
import Business.Rate.Rate;
import Tools.MySQLConnectionUtil;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author 15469
 */
public class RateChartJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RateChartJPanel
     */
    List<Rate> rateList;
    Connection connection;
    private ArrayList<Professor>professorlist;
    private ProfessorDirectory professorDirectory;
   public RateChartJPanel() throws SQLException {
        connection=MySQLConnectionUtil.getConnection();
        rateList= Rate.loadAllRatesFromDatabase(connection);
        professorDirectory=new ProfessorDirectory();
        professorDirectory.loadAllProfessorsFromDatabase(connection);
        DefaultCategoryDataset dataset = createDataset(rateList);
        JFreeChart chart = ChartFactory.createBarChart(
                "Rating", // 图表标题
                "Score Part", // X轴标签
                "Score", // Y轴标签
                dataset,
                PlotOrientation.VERTICAL,
                true,
                false,
                false
        );
        BarRenderer renderer = new BarRenderer();
        renderer.setBaseItemLabelGenerator(new org.jfree.chart.labels.StandardCategoryItemLabelGenerator());
        renderer.setBaseItemLabelsVisible(true);
        chart.getCategoryPlot().setRenderer(renderer);
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        add(chartPanel);
    }
   
    private DefaultCategoryDataset createDataset(List<Rate> rates) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for (Rate rate : rates) {
            Professor p = professorDirectory.getProfessorById(rate.getProfessorId());
            if(p!=null){
            dataset.addValue(Double.parseDouble(rate.getScore()), "Score", "Professor "+p.getPersonName());
            dataset.addValue(Double.parseDouble(rate.getScorePart1()), "Score Part 1", "Professor "+p.getPersonName());
            dataset.addValue(Double.parseDouble(rate.getScorePart2()), "Score Part 2", "Professor "+p.getPersonName());
            dataset.addValue(Double.parseDouble(rate.getScorePart3()), "Score Part 3", "Professor "+p.getPersonName());
            dataset.addValue(Double.parseDouble(rate.getScorePart4()), "Score Part 4", "Professor "+p.getPersonName());
            }

        }
        return dataset;
    }
   
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
